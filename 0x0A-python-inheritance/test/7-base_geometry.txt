>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("my_int", 0.444)
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", int('inf'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'inf'

>>> bg.integer_validator("my_int", int(float('inf')))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("my_int")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("my_int", float('inf'))
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", float('NaN'))
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", int('NaN'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'NaN'

>>> bg.integer_validator("my_int", int(float('NaN')))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> bg.integer_validator(1024)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator(['w', 'e', 's', 'h'], 34)

>>> bg.integer_validator(['w', 'e', 's', 'h'], 0.554)
Traceback (most recent call last):
TypeError: ['w', 'e', 's', 'h'] must be an integer
